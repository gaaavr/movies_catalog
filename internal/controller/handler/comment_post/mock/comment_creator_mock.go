package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"
	"web_lab/internal/models"

	"github.com/gojuno/minimock/v3"
)

// CommentCreatorMock implements comment_post.commentCreator
type CommentCreatorMock struct {
	t minimock.Tester

	funcCreateComment          func(ctx context.Context, comment models.Comment) (err error)
	inspectFuncCreateComment   func(ctx context.Context, comment models.Comment)
	afterCreateCommentCounter  uint64
	beforeCreateCommentCounter uint64
	CreateCommentMock          mCommentCreatorMockCreateComment
}

// NewCommentCreatorMock returns a mock for comment_post.commentCreator
func NewCommentCreatorMock(t minimock.Tester) *CommentCreatorMock {
	m := &CommentCreatorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateCommentMock = mCommentCreatorMockCreateComment{mock: m}
	m.CreateCommentMock.callArgs = []*CommentCreatorMockCreateCommentParams{}

	return m
}

type mCommentCreatorMockCreateComment struct {
	mock               *CommentCreatorMock
	defaultExpectation *CommentCreatorMockCreateCommentExpectation
	expectations       []*CommentCreatorMockCreateCommentExpectation

	callArgs []*CommentCreatorMockCreateCommentParams
	mutex    sync.RWMutex
}

// CommentCreatorMockCreateCommentExpectation specifies expectation struct of the commentCreator.CreateComment
type CommentCreatorMockCreateCommentExpectation struct {
	mock    *CommentCreatorMock
	params  *CommentCreatorMockCreateCommentParams
	results *CommentCreatorMockCreateCommentResults
	Counter uint64
}

// CommentCreatorMockCreateCommentParams contains parameters of the commentCreator.CreateComment
type CommentCreatorMockCreateCommentParams struct {
	ctx     context.Context
	comment models.Comment
}

// CommentCreatorMockCreateCommentResults contains results of the commentCreator.CreateComment
type CommentCreatorMockCreateCommentResults struct {
	err error
}

// Expect sets up expected params for commentCreator.CreateComment
func (mmCreateComment *mCommentCreatorMockCreateComment) Expect(ctx context.Context, comment models.Comment) *mCommentCreatorMockCreateComment {
	if mmCreateComment.mock.funcCreateComment != nil {
		mmCreateComment.mock.t.Fatalf("CommentCreatorMock.CreateComment mock is already set by Set")
	}

	if mmCreateComment.defaultExpectation == nil {
		mmCreateComment.defaultExpectation = &CommentCreatorMockCreateCommentExpectation{}
	}

	mmCreateComment.defaultExpectation.params = &CommentCreatorMockCreateCommentParams{ctx, comment}
	for _, e := range mmCreateComment.expectations {
		if minimock.Equal(e.params, mmCreateComment.defaultExpectation.params) {
			mmCreateComment.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateComment.defaultExpectation.params)
		}
	}

	return mmCreateComment
}

// Inspect accepts an inspector function that has same arguments as the commentCreator.CreateComment
func (mmCreateComment *mCommentCreatorMockCreateComment) Inspect(f func(ctx context.Context, comment models.Comment)) *mCommentCreatorMockCreateComment {
	if mmCreateComment.mock.inspectFuncCreateComment != nil {
		mmCreateComment.mock.t.Fatalf("Inspect function is already set for CommentCreatorMock.CreateComment")
	}

	mmCreateComment.mock.inspectFuncCreateComment = f

	return mmCreateComment
}

// Return sets up results that will be returned by commentCreator.CreateComment
func (mmCreateComment *mCommentCreatorMockCreateComment) Return(err error) *CommentCreatorMock {
	if mmCreateComment.mock.funcCreateComment != nil {
		mmCreateComment.mock.t.Fatalf("CommentCreatorMock.CreateComment mock is already set by Set")
	}

	if mmCreateComment.defaultExpectation == nil {
		mmCreateComment.defaultExpectation = &CommentCreatorMockCreateCommentExpectation{mock: mmCreateComment.mock}
	}
	mmCreateComment.defaultExpectation.results = &CommentCreatorMockCreateCommentResults{err}
	return mmCreateComment.mock
}

// Set uses given function f to mock the commentCreator.CreateComment method
func (mmCreateComment *mCommentCreatorMockCreateComment) Set(f func(ctx context.Context, comment models.Comment) (err error)) *CommentCreatorMock {
	if mmCreateComment.defaultExpectation != nil {
		mmCreateComment.mock.t.Fatalf("Default expectation is already set for the commentCreator.CreateComment method")
	}

	if len(mmCreateComment.expectations) > 0 {
		mmCreateComment.mock.t.Fatalf("Some expectations are already set for the commentCreator.CreateComment method")
	}

	mmCreateComment.mock.funcCreateComment = f
	return mmCreateComment.mock
}

// When sets expectation for the commentCreator.CreateComment which will trigger the result defined by the following
// Then helper
func (mmCreateComment *mCommentCreatorMockCreateComment) When(ctx context.Context, comment models.Comment) *CommentCreatorMockCreateCommentExpectation {
	if mmCreateComment.mock.funcCreateComment != nil {
		mmCreateComment.mock.t.Fatalf("CommentCreatorMock.CreateComment mock is already set by Set")
	}

	expectation := &CommentCreatorMockCreateCommentExpectation{
		mock:   mmCreateComment.mock,
		params: &CommentCreatorMockCreateCommentParams{ctx, comment},
	}
	mmCreateComment.expectations = append(mmCreateComment.expectations, expectation)
	return expectation
}

// Then sets up commentCreator.CreateComment return parameters for the expectation previously defined by the When method
func (e *CommentCreatorMockCreateCommentExpectation) Then(err error) *CommentCreatorMock {
	e.results = &CommentCreatorMockCreateCommentResults{err}
	return e.mock
}

// CreateComment implements comment_post.commentCreator
func (mmCreateComment *CommentCreatorMock) CreateComment(ctx context.Context, comment models.Comment) (err error) {
	mm_atomic.AddUint64(&mmCreateComment.beforeCreateCommentCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateComment.afterCreateCommentCounter, 1)

	if mmCreateComment.inspectFuncCreateComment != nil {
		mmCreateComment.inspectFuncCreateComment(ctx, comment)
	}

	mm_params := &CommentCreatorMockCreateCommentParams{ctx, comment}

	// Record call args
	mmCreateComment.CreateCommentMock.mutex.Lock()
	mmCreateComment.CreateCommentMock.callArgs = append(mmCreateComment.CreateCommentMock.callArgs, mm_params)
	mmCreateComment.CreateCommentMock.mutex.Unlock()

	for _, e := range mmCreateComment.CreateCommentMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateComment.CreateCommentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateComment.CreateCommentMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateComment.CreateCommentMock.defaultExpectation.params
		mm_got := CommentCreatorMockCreateCommentParams{ctx, comment}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateComment.t.Errorf("CommentCreatorMock.CreateComment got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateComment.CreateCommentMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateComment.t.Fatal("No results are set for the CommentCreatorMock.CreateComment")
		}
		return (*mm_results).err
	}
	if mmCreateComment.funcCreateComment != nil {
		return mmCreateComment.funcCreateComment(ctx, comment)
	}
	mmCreateComment.t.Fatalf("Unexpected call to CommentCreatorMock.CreateComment. %v %v", ctx, comment)
	return
}

// CreateCommentAfterCounter returns a count of finished CommentCreatorMock.CreateComment invocations
func (mmCreateComment *CommentCreatorMock) CreateCommentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateComment.afterCreateCommentCounter)
}

// CreateCommentBeforeCounter returns a count of CommentCreatorMock.CreateComment invocations
func (mmCreateComment *CommentCreatorMock) CreateCommentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateComment.beforeCreateCommentCounter)
}

// Calls returns a list of arguments used in each call to CommentCreatorMock.CreateComment.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateComment *mCommentCreatorMockCreateComment) Calls() []*CommentCreatorMockCreateCommentParams {
	mmCreateComment.mutex.RLock()

	argCopy := make([]*CommentCreatorMockCreateCommentParams, len(mmCreateComment.callArgs))
	copy(argCopy, mmCreateComment.callArgs)

	mmCreateComment.mutex.RUnlock()

	return argCopy
}

// MinimockCreateCommentDone returns true if the count of the CreateComment invocations corresponds
// the number of defined expectations
func (m *CommentCreatorMock) MinimockCreateCommentDone() bool {
	for _, e := range m.CreateCommentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateCommentMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCommentCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateComment != nil && mm_atomic.LoadUint64(&m.afterCreateCommentCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateCommentInspect logs each unmet expectation
func (m *CommentCreatorMock) MinimockCreateCommentInspect() {
	for _, e := range m.CreateCommentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommentCreatorMock.CreateComment with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateCommentMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCommentCounter) < 1 {
		if m.CreateCommentMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommentCreatorMock.CreateComment")
		} else {
			m.t.Errorf("Expected call to CommentCreatorMock.CreateComment with params: %#v", *m.CreateCommentMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateComment != nil && mm_atomic.LoadUint64(&m.afterCreateCommentCounter) < 1 {
		m.t.Error("Expected call to CommentCreatorMock.CreateComment")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CommentCreatorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateCommentInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CommentCreatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CommentCreatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateCommentDone()
}
