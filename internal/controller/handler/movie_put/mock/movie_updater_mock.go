package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"
	"web_lab/internal/models"

	"github.com/gojuno/minimock/v3"
)

// MovieUpdaterMock implements movie_put.movieUpdater
type MovieUpdaterMock struct {
	t minimock.Tester

	funcUpdateMovie          func(ctx context.Context, movie models.Movie) (err error)
	inspectFuncUpdateMovie   func(ctx context.Context, movie models.Movie)
	afterUpdateMovieCounter  uint64
	beforeUpdateMovieCounter uint64
	UpdateMovieMock          mMovieUpdaterMockUpdateMovie
}

// NewMovieUpdaterMock returns a mock for movie_put.movieUpdater
func NewMovieUpdaterMock(t minimock.Tester) *MovieUpdaterMock {
	m := &MovieUpdaterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.UpdateMovieMock = mMovieUpdaterMockUpdateMovie{mock: m}
	m.UpdateMovieMock.callArgs = []*MovieUpdaterMockUpdateMovieParams{}

	return m
}

type mMovieUpdaterMockUpdateMovie struct {
	mock               *MovieUpdaterMock
	defaultExpectation *MovieUpdaterMockUpdateMovieExpectation
	expectations       []*MovieUpdaterMockUpdateMovieExpectation

	callArgs []*MovieUpdaterMockUpdateMovieParams
	mutex    sync.RWMutex
}

// MovieUpdaterMockUpdateMovieExpectation specifies expectation struct of the movieUpdater.UpdateMovie
type MovieUpdaterMockUpdateMovieExpectation struct {
	mock    *MovieUpdaterMock
	params  *MovieUpdaterMockUpdateMovieParams
	results *MovieUpdaterMockUpdateMovieResults
	Counter uint64
}

// MovieUpdaterMockUpdateMovieParams contains parameters of the movieUpdater.UpdateMovie
type MovieUpdaterMockUpdateMovieParams struct {
	ctx   context.Context
	movie models.Movie
}

// MovieUpdaterMockUpdateMovieResults contains results of the movieUpdater.UpdateMovie
type MovieUpdaterMockUpdateMovieResults struct {
	err error
}

// Expect sets up expected params for movieUpdater.UpdateMovie
func (mmUpdateMovie *mMovieUpdaterMockUpdateMovie) Expect(ctx context.Context, movie models.Movie) *mMovieUpdaterMockUpdateMovie {
	if mmUpdateMovie.mock.funcUpdateMovie != nil {
		mmUpdateMovie.mock.t.Fatalf("MovieUpdaterMock.UpdateMovie mock is already set by Set")
	}

	if mmUpdateMovie.defaultExpectation == nil {
		mmUpdateMovie.defaultExpectation = &MovieUpdaterMockUpdateMovieExpectation{}
	}

	mmUpdateMovie.defaultExpectation.params = &MovieUpdaterMockUpdateMovieParams{ctx, movie}
	for _, e := range mmUpdateMovie.expectations {
		if minimock.Equal(e.params, mmUpdateMovie.defaultExpectation.params) {
			mmUpdateMovie.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateMovie.defaultExpectation.params)
		}
	}

	return mmUpdateMovie
}

// Inspect accepts an inspector function that has same arguments as the movieUpdater.UpdateMovie
func (mmUpdateMovie *mMovieUpdaterMockUpdateMovie) Inspect(f func(ctx context.Context, movie models.Movie)) *mMovieUpdaterMockUpdateMovie {
	if mmUpdateMovie.mock.inspectFuncUpdateMovie != nil {
		mmUpdateMovie.mock.t.Fatalf("Inspect function is already set for MovieUpdaterMock.UpdateMovie")
	}

	mmUpdateMovie.mock.inspectFuncUpdateMovie = f

	return mmUpdateMovie
}

// Return sets up results that will be returned by movieUpdater.UpdateMovie
func (mmUpdateMovie *mMovieUpdaterMockUpdateMovie) Return(err error) *MovieUpdaterMock {
	if mmUpdateMovie.mock.funcUpdateMovie != nil {
		mmUpdateMovie.mock.t.Fatalf("MovieUpdaterMock.UpdateMovie mock is already set by Set")
	}

	if mmUpdateMovie.defaultExpectation == nil {
		mmUpdateMovie.defaultExpectation = &MovieUpdaterMockUpdateMovieExpectation{mock: mmUpdateMovie.mock}
	}
	mmUpdateMovie.defaultExpectation.results = &MovieUpdaterMockUpdateMovieResults{err}
	return mmUpdateMovie.mock
}

// Set uses given function f to mock the movieUpdater.UpdateMovie method
func (mmUpdateMovie *mMovieUpdaterMockUpdateMovie) Set(f func(ctx context.Context, movie models.Movie) (err error)) *MovieUpdaterMock {
	if mmUpdateMovie.defaultExpectation != nil {
		mmUpdateMovie.mock.t.Fatalf("Default expectation is already set for the movieUpdater.UpdateMovie method")
	}

	if len(mmUpdateMovie.expectations) > 0 {
		mmUpdateMovie.mock.t.Fatalf("Some expectations are already set for the movieUpdater.UpdateMovie method")
	}

	mmUpdateMovie.mock.funcUpdateMovie = f
	return mmUpdateMovie.mock
}

// When sets expectation for the movieUpdater.UpdateMovie which will trigger the result defined by the following
// Then helper
func (mmUpdateMovie *mMovieUpdaterMockUpdateMovie) When(ctx context.Context, movie models.Movie) *MovieUpdaterMockUpdateMovieExpectation {
	if mmUpdateMovie.mock.funcUpdateMovie != nil {
		mmUpdateMovie.mock.t.Fatalf("MovieUpdaterMock.UpdateMovie mock is already set by Set")
	}

	expectation := &MovieUpdaterMockUpdateMovieExpectation{
		mock:   mmUpdateMovie.mock,
		params: &MovieUpdaterMockUpdateMovieParams{ctx, movie},
	}
	mmUpdateMovie.expectations = append(mmUpdateMovie.expectations, expectation)
	return expectation
}

// Then sets up movieUpdater.UpdateMovie return parameters for the expectation previously defined by the When method
func (e *MovieUpdaterMockUpdateMovieExpectation) Then(err error) *MovieUpdaterMock {
	e.results = &MovieUpdaterMockUpdateMovieResults{err}
	return e.mock
}

// UpdateMovie implements movie_put.movieUpdater
func (mmUpdateMovie *MovieUpdaterMock) UpdateMovie(ctx context.Context, movie models.Movie) (err error) {
	mm_atomic.AddUint64(&mmUpdateMovie.beforeUpdateMovieCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateMovie.afterUpdateMovieCounter, 1)

	if mmUpdateMovie.inspectFuncUpdateMovie != nil {
		mmUpdateMovie.inspectFuncUpdateMovie(ctx, movie)
	}

	mm_params := &MovieUpdaterMockUpdateMovieParams{ctx, movie}

	// Record call args
	mmUpdateMovie.UpdateMovieMock.mutex.Lock()
	mmUpdateMovie.UpdateMovieMock.callArgs = append(mmUpdateMovie.UpdateMovieMock.callArgs, mm_params)
	mmUpdateMovie.UpdateMovieMock.mutex.Unlock()

	for _, e := range mmUpdateMovie.UpdateMovieMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdateMovie.UpdateMovieMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateMovie.UpdateMovieMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateMovie.UpdateMovieMock.defaultExpectation.params
		mm_got := MovieUpdaterMockUpdateMovieParams{ctx, movie}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateMovie.t.Errorf("MovieUpdaterMock.UpdateMovie got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateMovie.UpdateMovieMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateMovie.t.Fatal("No results are set for the MovieUpdaterMock.UpdateMovie")
		}
		return (*mm_results).err
	}
	if mmUpdateMovie.funcUpdateMovie != nil {
		return mmUpdateMovie.funcUpdateMovie(ctx, movie)
	}
	mmUpdateMovie.t.Fatalf("Unexpected call to MovieUpdaterMock.UpdateMovie. %v %v", ctx, movie)
	return
}

// UpdateMovieAfterCounter returns a count of finished MovieUpdaterMock.UpdateMovie invocations
func (mmUpdateMovie *MovieUpdaterMock) UpdateMovieAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateMovie.afterUpdateMovieCounter)
}

// UpdateMovieBeforeCounter returns a count of MovieUpdaterMock.UpdateMovie invocations
func (mmUpdateMovie *MovieUpdaterMock) UpdateMovieBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateMovie.beforeUpdateMovieCounter)
}

// Calls returns a list of arguments used in each call to MovieUpdaterMock.UpdateMovie.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateMovie *mMovieUpdaterMockUpdateMovie) Calls() []*MovieUpdaterMockUpdateMovieParams {
	mmUpdateMovie.mutex.RLock()

	argCopy := make([]*MovieUpdaterMockUpdateMovieParams, len(mmUpdateMovie.callArgs))
	copy(argCopy, mmUpdateMovie.callArgs)

	mmUpdateMovie.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateMovieDone returns true if the count of the UpdateMovie invocations corresponds
// the number of defined expectations
func (m *MovieUpdaterMock) MinimockUpdateMovieDone() bool {
	for _, e := range m.UpdateMovieMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMovieMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateMovieCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateMovie != nil && mm_atomic.LoadUint64(&m.afterUpdateMovieCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateMovieInspect logs each unmet expectation
func (m *MovieUpdaterMock) MinimockUpdateMovieInspect() {
	for _, e := range m.UpdateMovieMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MovieUpdaterMock.UpdateMovie with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMovieMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateMovieCounter) < 1 {
		if m.UpdateMovieMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MovieUpdaterMock.UpdateMovie")
		} else {
			m.t.Errorf("Expected call to MovieUpdaterMock.UpdateMovie with params: %#v", *m.UpdateMovieMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateMovie != nil && mm_atomic.LoadUint64(&m.afterUpdateMovieCounter) < 1 {
		m.t.Error("Expected call to MovieUpdaterMock.UpdateMovie")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MovieUpdaterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockUpdateMovieInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MovieUpdaterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MovieUpdaterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockUpdateMovieDone()
}
