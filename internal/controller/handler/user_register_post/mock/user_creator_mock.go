package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"
	"web_lab/internal/models"

	"github.com/gojuno/minimock/v3"
)

// UserCreatorMock implements user_register_post.userCreator
type UserCreatorMock struct {
	t minimock.Tester

	funcCreateUser          func(ctx context.Context, user models.User) (err error)
	inspectFuncCreateUser   func(ctx context.Context, user models.User)
	afterCreateUserCounter  uint64
	beforeCreateUserCounter uint64
	CreateUserMock          mUserCreatorMockCreateUser
}

// NewUserCreatorMock returns a mock for user_register_post.userCreator
func NewUserCreatorMock(t minimock.Tester) *UserCreatorMock {
	m := &UserCreatorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateUserMock = mUserCreatorMockCreateUser{mock: m}
	m.CreateUserMock.callArgs = []*UserCreatorMockCreateUserParams{}

	return m
}

type mUserCreatorMockCreateUser struct {
	mock               *UserCreatorMock
	defaultExpectation *UserCreatorMockCreateUserExpectation
	expectations       []*UserCreatorMockCreateUserExpectation

	callArgs []*UserCreatorMockCreateUserParams
	mutex    sync.RWMutex
}

// UserCreatorMockCreateUserExpectation specifies expectation struct of the userCreator.CreateUser
type UserCreatorMockCreateUserExpectation struct {
	mock    *UserCreatorMock
	params  *UserCreatorMockCreateUserParams
	results *UserCreatorMockCreateUserResults
	Counter uint64
}

// UserCreatorMockCreateUserParams contains parameters of the userCreator.CreateUser
type UserCreatorMockCreateUserParams struct {
	ctx  context.Context
	user models.User
}

// UserCreatorMockCreateUserResults contains results of the userCreator.CreateUser
type UserCreatorMockCreateUserResults struct {
	err error
}

// Expect sets up expected params for userCreator.CreateUser
func (mmCreateUser *mUserCreatorMockCreateUser) Expect(ctx context.Context, user models.User) *mUserCreatorMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserCreatorMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserCreatorMockCreateUserExpectation{}
	}

	mmCreateUser.defaultExpectation.params = &UserCreatorMockCreateUserParams{ctx, user}
	for _, e := range mmCreateUser.expectations {
		if minimock.Equal(e.params, mmCreateUser.defaultExpectation.params) {
			mmCreateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUser.defaultExpectation.params)
		}
	}

	return mmCreateUser
}

// Inspect accepts an inspector function that has same arguments as the userCreator.CreateUser
func (mmCreateUser *mUserCreatorMockCreateUser) Inspect(f func(ctx context.Context, user models.User)) *mUserCreatorMockCreateUser {
	if mmCreateUser.mock.inspectFuncCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("Inspect function is already set for UserCreatorMock.CreateUser")
	}

	mmCreateUser.mock.inspectFuncCreateUser = f

	return mmCreateUser
}

// Return sets up results that will be returned by userCreator.CreateUser
func (mmCreateUser *mUserCreatorMockCreateUser) Return(err error) *UserCreatorMock {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserCreatorMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserCreatorMockCreateUserExpectation{mock: mmCreateUser.mock}
	}
	mmCreateUser.defaultExpectation.results = &UserCreatorMockCreateUserResults{err}
	return mmCreateUser.mock
}

// Set uses given function f to mock the userCreator.CreateUser method
func (mmCreateUser *mUserCreatorMockCreateUser) Set(f func(ctx context.Context, user models.User) (err error)) *UserCreatorMock {
	if mmCreateUser.defaultExpectation != nil {
		mmCreateUser.mock.t.Fatalf("Default expectation is already set for the userCreator.CreateUser method")
	}

	if len(mmCreateUser.expectations) > 0 {
		mmCreateUser.mock.t.Fatalf("Some expectations are already set for the userCreator.CreateUser method")
	}

	mmCreateUser.mock.funcCreateUser = f
	return mmCreateUser.mock
}

// When sets expectation for the userCreator.CreateUser which will trigger the result defined by the following
// Then helper
func (mmCreateUser *mUserCreatorMockCreateUser) When(ctx context.Context, user models.User) *UserCreatorMockCreateUserExpectation {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserCreatorMock.CreateUser mock is already set by Set")
	}

	expectation := &UserCreatorMockCreateUserExpectation{
		mock:   mmCreateUser.mock,
		params: &UserCreatorMockCreateUserParams{ctx, user},
	}
	mmCreateUser.expectations = append(mmCreateUser.expectations, expectation)
	return expectation
}

// Then sets up userCreator.CreateUser return parameters for the expectation previously defined by the When method
func (e *UserCreatorMockCreateUserExpectation) Then(err error) *UserCreatorMock {
	e.results = &UserCreatorMockCreateUserResults{err}
	return e.mock
}

// CreateUser implements user_register_post.userCreator
func (mmCreateUser *UserCreatorMock) CreateUser(ctx context.Context, user models.User) (err error) {
	mm_atomic.AddUint64(&mmCreateUser.beforeCreateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUser.afterCreateUserCounter, 1)

	if mmCreateUser.inspectFuncCreateUser != nil {
		mmCreateUser.inspectFuncCreateUser(ctx, user)
	}

	mm_params := &UserCreatorMockCreateUserParams{ctx, user}

	// Record call args
	mmCreateUser.CreateUserMock.mutex.Lock()
	mmCreateUser.CreateUserMock.callArgs = append(mmCreateUser.CreateUserMock.callArgs, mm_params)
	mmCreateUser.CreateUserMock.mutex.Unlock()

	for _, e := range mmCreateUser.CreateUserMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateUser.CreateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUser.CreateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateUser.CreateUserMock.defaultExpectation.params
		mm_got := UserCreatorMockCreateUserParams{ctx, user}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateUser.t.Errorf("UserCreatorMock.CreateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateUser.CreateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateUser.t.Fatal("No results are set for the UserCreatorMock.CreateUser")
		}
		return (*mm_results).err
	}
	if mmCreateUser.funcCreateUser != nil {
		return mmCreateUser.funcCreateUser(ctx, user)
	}
	mmCreateUser.t.Fatalf("Unexpected call to UserCreatorMock.CreateUser. %v %v", ctx, user)
	return
}

// CreateUserAfterCounter returns a count of finished UserCreatorMock.CreateUser invocations
func (mmCreateUser *UserCreatorMock) CreateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.afterCreateUserCounter)
}

// CreateUserBeforeCounter returns a count of UserCreatorMock.CreateUser invocations
func (mmCreateUser *UserCreatorMock) CreateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.beforeCreateUserCounter)
}

// Calls returns a list of arguments used in each call to UserCreatorMock.CreateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUser *mUserCreatorMockCreateUser) Calls() []*UserCreatorMockCreateUserParams {
	mmCreateUser.mutex.RLock()

	argCopy := make([]*UserCreatorMockCreateUserParams, len(mmCreateUser.callArgs))
	copy(argCopy, mmCreateUser.callArgs)

	mmCreateUser.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUserDone returns true if the count of the CreateUser invocations corresponds
// the number of defined expectations
func (m *UserCreatorMock) MinimockCreateUserDone() bool {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateUserInspect logs each unmet expectation
func (m *UserCreatorMock) MinimockCreateUserInspect() {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCreatorMock.CreateUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		if m.CreateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserCreatorMock.CreateUser")
		} else {
			m.t.Errorf("Expected call to UserCreatorMock.CreateUser with params: %#v", *m.CreateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		m.t.Error("Expected call to UserCreatorMock.CreateUser")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserCreatorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateUserInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserCreatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserCreatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateUserDone()
}
