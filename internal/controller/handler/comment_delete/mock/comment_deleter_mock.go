package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CommentDeleterMock implements comment_delete.commentDeleter
type CommentDeleterMock struct {
	t minimock.Tester

	funcDeleteComment          func(ctx context.Context, id int64) (err error)
	inspectFuncDeleteComment   func(ctx context.Context, id int64)
	afterDeleteCommentCounter  uint64
	beforeDeleteCommentCounter uint64
	DeleteCommentMock          mCommentDeleterMockDeleteComment
}

// NewCommentDeleterMock returns a mock for comment_delete.commentDeleter
func NewCommentDeleterMock(t minimock.Tester) *CommentDeleterMock {
	m := &CommentDeleterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteCommentMock = mCommentDeleterMockDeleteComment{mock: m}
	m.DeleteCommentMock.callArgs = []*CommentDeleterMockDeleteCommentParams{}

	return m
}

type mCommentDeleterMockDeleteComment struct {
	mock               *CommentDeleterMock
	defaultExpectation *CommentDeleterMockDeleteCommentExpectation
	expectations       []*CommentDeleterMockDeleteCommentExpectation

	callArgs []*CommentDeleterMockDeleteCommentParams
	mutex    sync.RWMutex
}

// CommentDeleterMockDeleteCommentExpectation specifies expectation struct of the commentDeleter.DeleteComment
type CommentDeleterMockDeleteCommentExpectation struct {
	mock    *CommentDeleterMock
	params  *CommentDeleterMockDeleteCommentParams
	results *CommentDeleterMockDeleteCommentResults
	Counter uint64
}

// CommentDeleterMockDeleteCommentParams contains parameters of the commentDeleter.DeleteComment
type CommentDeleterMockDeleteCommentParams struct {
	ctx context.Context
	id  int64
}

// CommentDeleterMockDeleteCommentResults contains results of the commentDeleter.DeleteComment
type CommentDeleterMockDeleteCommentResults struct {
	err error
}

// Expect sets up expected params for commentDeleter.DeleteComment
func (mmDeleteComment *mCommentDeleterMockDeleteComment) Expect(ctx context.Context, id int64) *mCommentDeleterMockDeleteComment {
	if mmDeleteComment.mock.funcDeleteComment != nil {
		mmDeleteComment.mock.t.Fatalf("CommentDeleterMock.DeleteComment mock is already set by Set")
	}

	if mmDeleteComment.defaultExpectation == nil {
		mmDeleteComment.defaultExpectation = &CommentDeleterMockDeleteCommentExpectation{}
	}

	mmDeleteComment.defaultExpectation.params = &CommentDeleterMockDeleteCommentParams{ctx, id}
	for _, e := range mmDeleteComment.expectations {
		if minimock.Equal(e.params, mmDeleteComment.defaultExpectation.params) {
			mmDeleteComment.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteComment.defaultExpectation.params)
		}
	}

	return mmDeleteComment
}

// Inspect accepts an inspector function that has same arguments as the commentDeleter.DeleteComment
func (mmDeleteComment *mCommentDeleterMockDeleteComment) Inspect(f func(ctx context.Context, id int64)) *mCommentDeleterMockDeleteComment {
	if mmDeleteComment.mock.inspectFuncDeleteComment != nil {
		mmDeleteComment.mock.t.Fatalf("Inspect function is already set for CommentDeleterMock.DeleteComment")
	}

	mmDeleteComment.mock.inspectFuncDeleteComment = f

	return mmDeleteComment
}

// Return sets up results that will be returned by commentDeleter.DeleteComment
func (mmDeleteComment *mCommentDeleterMockDeleteComment) Return(err error) *CommentDeleterMock {
	if mmDeleteComment.mock.funcDeleteComment != nil {
		mmDeleteComment.mock.t.Fatalf("CommentDeleterMock.DeleteComment mock is already set by Set")
	}

	if mmDeleteComment.defaultExpectation == nil {
		mmDeleteComment.defaultExpectation = &CommentDeleterMockDeleteCommentExpectation{mock: mmDeleteComment.mock}
	}
	mmDeleteComment.defaultExpectation.results = &CommentDeleterMockDeleteCommentResults{err}
	return mmDeleteComment.mock
}

// Set uses given function f to mock the commentDeleter.DeleteComment method
func (mmDeleteComment *mCommentDeleterMockDeleteComment) Set(f func(ctx context.Context, id int64) (err error)) *CommentDeleterMock {
	if mmDeleteComment.defaultExpectation != nil {
		mmDeleteComment.mock.t.Fatalf("Default expectation is already set for the commentDeleter.DeleteComment method")
	}

	if len(mmDeleteComment.expectations) > 0 {
		mmDeleteComment.mock.t.Fatalf("Some expectations are already set for the commentDeleter.DeleteComment method")
	}

	mmDeleteComment.mock.funcDeleteComment = f
	return mmDeleteComment.mock
}

// When sets expectation for the commentDeleter.DeleteComment which will trigger the result defined by the following
// Then helper
func (mmDeleteComment *mCommentDeleterMockDeleteComment) When(ctx context.Context, id int64) *CommentDeleterMockDeleteCommentExpectation {
	if mmDeleteComment.mock.funcDeleteComment != nil {
		mmDeleteComment.mock.t.Fatalf("CommentDeleterMock.DeleteComment mock is already set by Set")
	}

	expectation := &CommentDeleterMockDeleteCommentExpectation{
		mock:   mmDeleteComment.mock,
		params: &CommentDeleterMockDeleteCommentParams{ctx, id},
	}
	mmDeleteComment.expectations = append(mmDeleteComment.expectations, expectation)
	return expectation
}

// Then sets up commentDeleter.DeleteComment return parameters for the expectation previously defined by the When method
func (e *CommentDeleterMockDeleteCommentExpectation) Then(err error) *CommentDeleterMock {
	e.results = &CommentDeleterMockDeleteCommentResults{err}
	return e.mock
}

// DeleteComment implements comment_delete.commentDeleter
func (mmDeleteComment *CommentDeleterMock) DeleteComment(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteComment.beforeDeleteCommentCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteComment.afterDeleteCommentCounter, 1)

	if mmDeleteComment.inspectFuncDeleteComment != nil {
		mmDeleteComment.inspectFuncDeleteComment(ctx, id)
	}

	mm_params := &CommentDeleterMockDeleteCommentParams{ctx, id}

	// Record call args
	mmDeleteComment.DeleteCommentMock.mutex.Lock()
	mmDeleteComment.DeleteCommentMock.callArgs = append(mmDeleteComment.DeleteCommentMock.callArgs, mm_params)
	mmDeleteComment.DeleteCommentMock.mutex.Unlock()

	for _, e := range mmDeleteComment.DeleteCommentMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteComment.DeleteCommentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteComment.DeleteCommentMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteComment.DeleteCommentMock.defaultExpectation.params
		mm_got := CommentDeleterMockDeleteCommentParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteComment.t.Errorf("CommentDeleterMock.DeleteComment got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteComment.DeleteCommentMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteComment.t.Fatal("No results are set for the CommentDeleterMock.DeleteComment")
		}
		return (*mm_results).err
	}
	if mmDeleteComment.funcDeleteComment != nil {
		return mmDeleteComment.funcDeleteComment(ctx, id)
	}
	mmDeleteComment.t.Fatalf("Unexpected call to CommentDeleterMock.DeleteComment. %v %v", ctx, id)
	return
}

// DeleteCommentAfterCounter returns a count of finished CommentDeleterMock.DeleteComment invocations
func (mmDeleteComment *CommentDeleterMock) DeleteCommentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteComment.afterDeleteCommentCounter)
}

// DeleteCommentBeforeCounter returns a count of CommentDeleterMock.DeleteComment invocations
func (mmDeleteComment *CommentDeleterMock) DeleteCommentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteComment.beforeDeleteCommentCounter)
}

// Calls returns a list of arguments used in each call to CommentDeleterMock.DeleteComment.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteComment *mCommentDeleterMockDeleteComment) Calls() []*CommentDeleterMockDeleteCommentParams {
	mmDeleteComment.mutex.RLock()

	argCopy := make([]*CommentDeleterMockDeleteCommentParams, len(mmDeleteComment.callArgs))
	copy(argCopy, mmDeleteComment.callArgs)

	mmDeleteComment.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteCommentDone returns true if the count of the DeleteComment invocations corresponds
// the number of defined expectations
func (m *CommentDeleterMock) MinimockDeleteCommentDone() bool {
	for _, e := range m.DeleteCommentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteCommentMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCommentCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteComment != nil && mm_atomic.LoadUint64(&m.afterDeleteCommentCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteCommentInspect logs each unmet expectation
func (m *CommentDeleterMock) MinimockDeleteCommentInspect() {
	for _, e := range m.DeleteCommentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommentDeleterMock.DeleteComment with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteCommentMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCommentCounter) < 1 {
		if m.DeleteCommentMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommentDeleterMock.DeleteComment")
		} else {
			m.t.Errorf("Expected call to CommentDeleterMock.DeleteComment with params: %#v", *m.DeleteCommentMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteComment != nil && mm_atomic.LoadUint64(&m.afterDeleteCommentCounter) < 1 {
		m.t.Error("Expected call to CommentDeleterMock.DeleteComment")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CommentDeleterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDeleteCommentInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CommentDeleterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CommentDeleterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteCommentDone()
}
