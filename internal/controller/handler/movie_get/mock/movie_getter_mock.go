package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"
	"web_lab/internal/models"

	"github.com/gojuno/minimock/v3"
)

// MovieGetterMock implements movie_get.movieGetter
type MovieGetterMock struct {
	t minimock.Tester

	funcGetMovie          func(ctx context.Context, id int64) (m1 models.Movie, err error)
	inspectFuncGetMovie   func(ctx context.Context, id int64)
	afterGetMovieCounter  uint64
	beforeGetMovieCounter uint64
	GetMovieMock          mMovieGetterMockGetMovie
}

// NewMovieGetterMock returns a mock for movie_get.movieGetter
func NewMovieGetterMock(t minimock.Tester) *MovieGetterMock {
	m := &MovieGetterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMovieMock = mMovieGetterMockGetMovie{mock: m}
	m.GetMovieMock.callArgs = []*MovieGetterMockGetMovieParams{}

	return m
}

type mMovieGetterMockGetMovie struct {
	mock               *MovieGetterMock
	defaultExpectation *MovieGetterMockGetMovieExpectation
	expectations       []*MovieGetterMockGetMovieExpectation

	callArgs []*MovieGetterMockGetMovieParams
	mutex    sync.RWMutex
}

// MovieGetterMockGetMovieExpectation specifies expectation struct of the movieGetter.GetMovie
type MovieGetterMockGetMovieExpectation struct {
	mock    *MovieGetterMock
	params  *MovieGetterMockGetMovieParams
	results *MovieGetterMockGetMovieResults
	Counter uint64
}

// MovieGetterMockGetMovieParams contains parameters of the movieGetter.GetMovie
type MovieGetterMockGetMovieParams struct {
	ctx context.Context
	id  int64
}

// MovieGetterMockGetMovieResults contains results of the movieGetter.GetMovie
type MovieGetterMockGetMovieResults struct {
	m1  models.Movie
	err error
}

// Expect sets up expected params for movieGetter.GetMovie
func (mmGetMovie *mMovieGetterMockGetMovie) Expect(ctx context.Context, id int64) *mMovieGetterMockGetMovie {
	if mmGetMovie.mock.funcGetMovie != nil {
		mmGetMovie.mock.t.Fatalf("MovieGetterMock.GetMovie mock is already set by Set")
	}

	if mmGetMovie.defaultExpectation == nil {
		mmGetMovie.defaultExpectation = &MovieGetterMockGetMovieExpectation{}
	}

	mmGetMovie.defaultExpectation.params = &MovieGetterMockGetMovieParams{ctx, id}
	for _, e := range mmGetMovie.expectations {
		if minimock.Equal(e.params, mmGetMovie.defaultExpectation.params) {
			mmGetMovie.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetMovie.defaultExpectation.params)
		}
	}

	return mmGetMovie
}

// Inspect accepts an inspector function that has same arguments as the movieGetter.GetMovie
func (mmGetMovie *mMovieGetterMockGetMovie) Inspect(f func(ctx context.Context, id int64)) *mMovieGetterMockGetMovie {
	if mmGetMovie.mock.inspectFuncGetMovie != nil {
		mmGetMovie.mock.t.Fatalf("Inspect function is already set for MovieGetterMock.GetMovie")
	}

	mmGetMovie.mock.inspectFuncGetMovie = f

	return mmGetMovie
}

// Return sets up results that will be returned by movieGetter.GetMovie
func (mmGetMovie *mMovieGetterMockGetMovie) Return(m1 models.Movie, err error) *MovieGetterMock {
	if mmGetMovie.mock.funcGetMovie != nil {
		mmGetMovie.mock.t.Fatalf("MovieGetterMock.GetMovie mock is already set by Set")
	}

	if mmGetMovie.defaultExpectation == nil {
		mmGetMovie.defaultExpectation = &MovieGetterMockGetMovieExpectation{mock: mmGetMovie.mock}
	}
	mmGetMovie.defaultExpectation.results = &MovieGetterMockGetMovieResults{m1, err}
	return mmGetMovie.mock
}

// Set uses given function f to mock the movieGetter.GetMovie method
func (mmGetMovie *mMovieGetterMockGetMovie) Set(f func(ctx context.Context, id int64) (m1 models.Movie, err error)) *MovieGetterMock {
	if mmGetMovie.defaultExpectation != nil {
		mmGetMovie.mock.t.Fatalf("Default expectation is already set for the movieGetter.GetMovie method")
	}

	if len(mmGetMovie.expectations) > 0 {
		mmGetMovie.mock.t.Fatalf("Some expectations are already set for the movieGetter.GetMovie method")
	}

	mmGetMovie.mock.funcGetMovie = f
	return mmGetMovie.mock
}

// When sets expectation for the movieGetter.GetMovie which will trigger the result defined by the following
// Then helper
func (mmGetMovie *mMovieGetterMockGetMovie) When(ctx context.Context, id int64) *MovieGetterMockGetMovieExpectation {
	if mmGetMovie.mock.funcGetMovie != nil {
		mmGetMovie.mock.t.Fatalf("MovieGetterMock.GetMovie mock is already set by Set")
	}

	expectation := &MovieGetterMockGetMovieExpectation{
		mock:   mmGetMovie.mock,
		params: &MovieGetterMockGetMovieParams{ctx, id},
	}
	mmGetMovie.expectations = append(mmGetMovie.expectations, expectation)
	return expectation
}

// Then sets up movieGetter.GetMovie return parameters for the expectation previously defined by the When method
func (e *MovieGetterMockGetMovieExpectation) Then(m1 models.Movie, err error) *MovieGetterMock {
	e.results = &MovieGetterMockGetMovieResults{m1, err}
	return e.mock
}

// GetMovie implements movie_get.movieGetter
func (mmGetMovie *MovieGetterMock) GetMovie(ctx context.Context, id int64) (m1 models.Movie, err error) {
	mm_atomic.AddUint64(&mmGetMovie.beforeGetMovieCounter, 1)
	defer mm_atomic.AddUint64(&mmGetMovie.afterGetMovieCounter, 1)

	if mmGetMovie.inspectFuncGetMovie != nil {
		mmGetMovie.inspectFuncGetMovie(ctx, id)
	}

	mm_params := &MovieGetterMockGetMovieParams{ctx, id}

	// Record call args
	mmGetMovie.GetMovieMock.mutex.Lock()
	mmGetMovie.GetMovieMock.callArgs = append(mmGetMovie.GetMovieMock.callArgs, mm_params)
	mmGetMovie.GetMovieMock.mutex.Unlock()

	for _, e := range mmGetMovie.GetMovieMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.m1, e.results.err
		}
	}

	if mmGetMovie.GetMovieMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetMovie.GetMovieMock.defaultExpectation.Counter, 1)
		mm_want := mmGetMovie.GetMovieMock.defaultExpectation.params
		mm_got := MovieGetterMockGetMovieParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetMovie.t.Errorf("MovieGetterMock.GetMovie got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetMovie.GetMovieMock.defaultExpectation.results
		if mm_results == nil {
			mmGetMovie.t.Fatal("No results are set for the MovieGetterMock.GetMovie")
		}
		return (*mm_results).m1, (*mm_results).err
	}
	if mmGetMovie.funcGetMovie != nil {
		return mmGetMovie.funcGetMovie(ctx, id)
	}
	mmGetMovie.t.Fatalf("Unexpected call to MovieGetterMock.GetMovie. %v %v", ctx, id)
	return
}

// GetMovieAfterCounter returns a count of finished MovieGetterMock.GetMovie invocations
func (mmGetMovie *MovieGetterMock) GetMovieAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMovie.afterGetMovieCounter)
}

// GetMovieBeforeCounter returns a count of MovieGetterMock.GetMovie invocations
func (mmGetMovie *MovieGetterMock) GetMovieBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMovie.beforeGetMovieCounter)
}

// Calls returns a list of arguments used in each call to MovieGetterMock.GetMovie.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetMovie *mMovieGetterMockGetMovie) Calls() []*MovieGetterMockGetMovieParams {
	mmGetMovie.mutex.RLock()

	argCopy := make([]*MovieGetterMockGetMovieParams, len(mmGetMovie.callArgs))
	copy(argCopy, mmGetMovie.callArgs)

	mmGetMovie.mutex.RUnlock()

	return argCopy
}

// MinimockGetMovieDone returns true if the count of the GetMovie invocations corresponds
// the number of defined expectations
func (m *MovieGetterMock) MinimockGetMovieDone() bool {
	for _, e := range m.GetMovieMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMovieMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMovieCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMovie != nil && mm_atomic.LoadUint64(&m.afterGetMovieCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetMovieInspect logs each unmet expectation
func (m *MovieGetterMock) MinimockGetMovieInspect() {
	for _, e := range m.GetMovieMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MovieGetterMock.GetMovie with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMovieMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMovieCounter) < 1 {
		if m.GetMovieMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MovieGetterMock.GetMovie")
		} else {
			m.t.Errorf("Expected call to MovieGetterMock.GetMovie with params: %#v", *m.GetMovieMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMovie != nil && mm_atomic.LoadUint64(&m.afterGetMovieCounter) < 1 {
		m.t.Error("Expected call to MovieGetterMock.GetMovie")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MovieGetterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetMovieInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MovieGetterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MovieGetterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetMovieDone()
}
