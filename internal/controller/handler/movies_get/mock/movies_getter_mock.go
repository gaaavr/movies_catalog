package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"
	"web_lab/internal/models"

	"github.com/gojuno/minimock/v3"
)

// MoviesGetterMock implements movies_get.moviesGetter
type MoviesGetterMock struct {
	t minimock.Tester

	funcGetMovies          func(ctx context.Context, opts models.MoviesOpts) (ma1 []models.Movie, err error)
	inspectFuncGetMovies   func(ctx context.Context, opts models.MoviesOpts)
	afterGetMoviesCounter  uint64
	beforeGetMoviesCounter uint64
	GetMoviesMock          mMoviesGetterMockGetMovies
}

// NewMoviesGetterMock returns a mock for movies_get.moviesGetter
func NewMoviesGetterMock(t minimock.Tester) *MoviesGetterMock {
	m := &MoviesGetterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMoviesMock = mMoviesGetterMockGetMovies{mock: m}
	m.GetMoviesMock.callArgs = []*MoviesGetterMockGetMoviesParams{}

	return m
}

type mMoviesGetterMockGetMovies struct {
	mock               *MoviesGetterMock
	defaultExpectation *MoviesGetterMockGetMoviesExpectation
	expectations       []*MoviesGetterMockGetMoviesExpectation

	callArgs []*MoviesGetterMockGetMoviesParams
	mutex    sync.RWMutex
}

// MoviesGetterMockGetMoviesExpectation specifies expectation struct of the moviesGetter.GetMovies
type MoviesGetterMockGetMoviesExpectation struct {
	mock    *MoviesGetterMock
	params  *MoviesGetterMockGetMoviesParams
	results *MoviesGetterMockGetMoviesResults
	Counter uint64
}

// MoviesGetterMockGetMoviesParams contains parameters of the moviesGetter.GetMovies
type MoviesGetterMockGetMoviesParams struct {
	ctx  context.Context
	opts models.MoviesOpts
}

// MoviesGetterMockGetMoviesResults contains results of the moviesGetter.GetMovies
type MoviesGetterMockGetMoviesResults struct {
	ma1 []models.Movie
	err error
}

// Expect sets up expected params for moviesGetter.GetMovies
func (mmGetMovies *mMoviesGetterMockGetMovies) Expect(ctx context.Context, opts models.MoviesOpts) *mMoviesGetterMockGetMovies {
	if mmGetMovies.mock.funcGetMovies != nil {
		mmGetMovies.mock.t.Fatalf("MoviesGetterMock.GetMovies mock is already set by Set")
	}

	if mmGetMovies.defaultExpectation == nil {
		mmGetMovies.defaultExpectation = &MoviesGetterMockGetMoviesExpectation{}
	}

	mmGetMovies.defaultExpectation.params = &MoviesGetterMockGetMoviesParams{ctx, opts}
	for _, e := range mmGetMovies.expectations {
		if minimock.Equal(e.params, mmGetMovies.defaultExpectation.params) {
			mmGetMovies.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetMovies.defaultExpectation.params)
		}
	}

	return mmGetMovies
}

// Inspect accepts an inspector function that has same arguments as the moviesGetter.GetMovies
func (mmGetMovies *mMoviesGetterMockGetMovies) Inspect(f func(ctx context.Context, opts models.MoviesOpts)) *mMoviesGetterMockGetMovies {
	if mmGetMovies.mock.inspectFuncGetMovies != nil {
		mmGetMovies.mock.t.Fatalf("Inspect function is already set for MoviesGetterMock.GetMovies")
	}

	mmGetMovies.mock.inspectFuncGetMovies = f

	return mmGetMovies
}

// Return sets up results that will be returned by moviesGetter.GetMovies
func (mmGetMovies *mMoviesGetterMockGetMovies) Return(ma1 []models.Movie, err error) *MoviesGetterMock {
	if mmGetMovies.mock.funcGetMovies != nil {
		mmGetMovies.mock.t.Fatalf("MoviesGetterMock.GetMovies mock is already set by Set")
	}

	if mmGetMovies.defaultExpectation == nil {
		mmGetMovies.defaultExpectation = &MoviesGetterMockGetMoviesExpectation{mock: mmGetMovies.mock}
	}
	mmGetMovies.defaultExpectation.results = &MoviesGetterMockGetMoviesResults{ma1, err}
	return mmGetMovies.mock
}

// Set uses given function f to mock the moviesGetter.GetMovies method
func (mmGetMovies *mMoviesGetterMockGetMovies) Set(f func(ctx context.Context, opts models.MoviesOpts) (ma1 []models.Movie, err error)) *MoviesGetterMock {
	if mmGetMovies.defaultExpectation != nil {
		mmGetMovies.mock.t.Fatalf("Default expectation is already set for the moviesGetter.GetMovies method")
	}

	if len(mmGetMovies.expectations) > 0 {
		mmGetMovies.mock.t.Fatalf("Some expectations are already set for the moviesGetter.GetMovies method")
	}

	mmGetMovies.mock.funcGetMovies = f
	return mmGetMovies.mock
}

// When sets expectation for the moviesGetter.GetMovies which will trigger the result defined by the following
// Then helper
func (mmGetMovies *mMoviesGetterMockGetMovies) When(ctx context.Context, opts models.MoviesOpts) *MoviesGetterMockGetMoviesExpectation {
	if mmGetMovies.mock.funcGetMovies != nil {
		mmGetMovies.mock.t.Fatalf("MoviesGetterMock.GetMovies mock is already set by Set")
	}

	expectation := &MoviesGetterMockGetMoviesExpectation{
		mock:   mmGetMovies.mock,
		params: &MoviesGetterMockGetMoviesParams{ctx, opts},
	}
	mmGetMovies.expectations = append(mmGetMovies.expectations, expectation)
	return expectation
}

// Then sets up moviesGetter.GetMovies return parameters for the expectation previously defined by the When method
func (e *MoviesGetterMockGetMoviesExpectation) Then(ma1 []models.Movie, err error) *MoviesGetterMock {
	e.results = &MoviesGetterMockGetMoviesResults{ma1, err}
	return e.mock
}

// GetMovies implements movies_get.moviesGetter
func (mmGetMovies *MoviesGetterMock) GetMovies(ctx context.Context, opts models.MoviesOpts) (ma1 []models.Movie, err error) {
	mm_atomic.AddUint64(&mmGetMovies.beforeGetMoviesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetMovies.afterGetMoviesCounter, 1)

	if mmGetMovies.inspectFuncGetMovies != nil {
		mmGetMovies.inspectFuncGetMovies(ctx, opts)
	}

	mm_params := &MoviesGetterMockGetMoviesParams{ctx, opts}

	// Record call args
	mmGetMovies.GetMoviesMock.mutex.Lock()
	mmGetMovies.GetMoviesMock.callArgs = append(mmGetMovies.GetMoviesMock.callArgs, mm_params)
	mmGetMovies.GetMoviesMock.mutex.Unlock()

	for _, e := range mmGetMovies.GetMoviesMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ma1, e.results.err
		}
	}

	if mmGetMovies.GetMoviesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetMovies.GetMoviesMock.defaultExpectation.Counter, 1)
		mm_want := mmGetMovies.GetMoviesMock.defaultExpectation.params
		mm_got := MoviesGetterMockGetMoviesParams{ctx, opts}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetMovies.t.Errorf("MoviesGetterMock.GetMovies got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetMovies.GetMoviesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetMovies.t.Fatal("No results are set for the MoviesGetterMock.GetMovies")
		}
		return (*mm_results).ma1, (*mm_results).err
	}
	if mmGetMovies.funcGetMovies != nil {
		return mmGetMovies.funcGetMovies(ctx, opts)
	}
	mmGetMovies.t.Fatalf("Unexpected call to MoviesGetterMock.GetMovies. %v %v", ctx, opts)
	return
}

// GetMoviesAfterCounter returns a count of finished MoviesGetterMock.GetMovies invocations
func (mmGetMovies *MoviesGetterMock) GetMoviesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMovies.afterGetMoviesCounter)
}

// GetMoviesBeforeCounter returns a count of MoviesGetterMock.GetMovies invocations
func (mmGetMovies *MoviesGetterMock) GetMoviesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMovies.beforeGetMoviesCounter)
}

// Calls returns a list of arguments used in each call to MoviesGetterMock.GetMovies.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetMovies *mMoviesGetterMockGetMovies) Calls() []*MoviesGetterMockGetMoviesParams {
	mmGetMovies.mutex.RLock()

	argCopy := make([]*MoviesGetterMockGetMoviesParams, len(mmGetMovies.callArgs))
	copy(argCopy, mmGetMovies.callArgs)

	mmGetMovies.mutex.RUnlock()

	return argCopy
}

// MinimockGetMoviesDone returns true if the count of the GetMovies invocations corresponds
// the number of defined expectations
func (m *MoviesGetterMock) MinimockGetMoviesDone() bool {
	for _, e := range m.GetMoviesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMoviesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMoviesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMovies != nil && mm_atomic.LoadUint64(&m.afterGetMoviesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetMoviesInspect logs each unmet expectation
func (m *MoviesGetterMock) MinimockGetMoviesInspect() {
	for _, e := range m.GetMoviesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MoviesGetterMock.GetMovies with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMoviesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMoviesCounter) < 1 {
		if m.GetMoviesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MoviesGetterMock.GetMovies")
		} else {
			m.t.Errorf("Expected call to MoviesGetterMock.GetMovies with params: %#v", *m.GetMoviesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMovies != nil && mm_atomic.LoadUint64(&m.afterGetMoviesCounter) < 1 {
		m.t.Error("Expected call to MoviesGetterMock.GetMovies")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MoviesGetterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetMoviesInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MoviesGetterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MoviesGetterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetMoviesDone()
}
