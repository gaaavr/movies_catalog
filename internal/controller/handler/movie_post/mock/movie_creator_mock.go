package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"
	"web_lab/internal/models"

	"github.com/gojuno/minimock/v3"
)

// MovieCreatorMock implements movie_post.movieCreator
type MovieCreatorMock struct {
	t minimock.Tester

	funcCreateMovie          func(ctx context.Context, movie models.Movie) (err error)
	inspectFuncCreateMovie   func(ctx context.Context, movie models.Movie)
	afterCreateMovieCounter  uint64
	beforeCreateMovieCounter uint64
	CreateMovieMock          mMovieCreatorMockCreateMovie
}

// NewMovieCreatorMock returns a mock for movie_post.movieCreator
func NewMovieCreatorMock(t minimock.Tester) *MovieCreatorMock {
	m := &MovieCreatorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMovieMock = mMovieCreatorMockCreateMovie{mock: m}
	m.CreateMovieMock.callArgs = []*MovieCreatorMockCreateMovieParams{}

	return m
}

type mMovieCreatorMockCreateMovie struct {
	mock               *MovieCreatorMock
	defaultExpectation *MovieCreatorMockCreateMovieExpectation
	expectations       []*MovieCreatorMockCreateMovieExpectation

	callArgs []*MovieCreatorMockCreateMovieParams
	mutex    sync.RWMutex
}

// MovieCreatorMockCreateMovieExpectation specifies expectation struct of the movieCreator.CreateMovie
type MovieCreatorMockCreateMovieExpectation struct {
	mock    *MovieCreatorMock
	params  *MovieCreatorMockCreateMovieParams
	results *MovieCreatorMockCreateMovieResults
	Counter uint64
}

// MovieCreatorMockCreateMovieParams contains parameters of the movieCreator.CreateMovie
type MovieCreatorMockCreateMovieParams struct {
	ctx   context.Context
	movie models.Movie
}

// MovieCreatorMockCreateMovieResults contains results of the movieCreator.CreateMovie
type MovieCreatorMockCreateMovieResults struct {
	err error
}

// Expect sets up expected params for movieCreator.CreateMovie
func (mmCreateMovie *mMovieCreatorMockCreateMovie) Expect(ctx context.Context, movie models.Movie) *mMovieCreatorMockCreateMovie {
	if mmCreateMovie.mock.funcCreateMovie != nil {
		mmCreateMovie.mock.t.Fatalf("MovieCreatorMock.CreateMovie mock is already set by Set")
	}

	if mmCreateMovie.defaultExpectation == nil {
		mmCreateMovie.defaultExpectation = &MovieCreatorMockCreateMovieExpectation{}
	}

	mmCreateMovie.defaultExpectation.params = &MovieCreatorMockCreateMovieParams{ctx, movie}
	for _, e := range mmCreateMovie.expectations {
		if minimock.Equal(e.params, mmCreateMovie.defaultExpectation.params) {
			mmCreateMovie.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateMovie.defaultExpectation.params)
		}
	}

	return mmCreateMovie
}

// Inspect accepts an inspector function that has same arguments as the movieCreator.CreateMovie
func (mmCreateMovie *mMovieCreatorMockCreateMovie) Inspect(f func(ctx context.Context, movie models.Movie)) *mMovieCreatorMockCreateMovie {
	if mmCreateMovie.mock.inspectFuncCreateMovie != nil {
		mmCreateMovie.mock.t.Fatalf("Inspect function is already set for MovieCreatorMock.CreateMovie")
	}

	mmCreateMovie.mock.inspectFuncCreateMovie = f

	return mmCreateMovie
}

// Return sets up results that will be returned by movieCreator.CreateMovie
func (mmCreateMovie *mMovieCreatorMockCreateMovie) Return(err error) *MovieCreatorMock {
	if mmCreateMovie.mock.funcCreateMovie != nil {
		mmCreateMovie.mock.t.Fatalf("MovieCreatorMock.CreateMovie mock is already set by Set")
	}

	if mmCreateMovie.defaultExpectation == nil {
		mmCreateMovie.defaultExpectation = &MovieCreatorMockCreateMovieExpectation{mock: mmCreateMovie.mock}
	}
	mmCreateMovie.defaultExpectation.results = &MovieCreatorMockCreateMovieResults{err}
	return mmCreateMovie.mock
}

// Set uses given function f to mock the movieCreator.CreateMovie method
func (mmCreateMovie *mMovieCreatorMockCreateMovie) Set(f func(ctx context.Context, movie models.Movie) (err error)) *MovieCreatorMock {
	if mmCreateMovie.defaultExpectation != nil {
		mmCreateMovie.mock.t.Fatalf("Default expectation is already set for the movieCreator.CreateMovie method")
	}

	if len(mmCreateMovie.expectations) > 0 {
		mmCreateMovie.mock.t.Fatalf("Some expectations are already set for the movieCreator.CreateMovie method")
	}

	mmCreateMovie.mock.funcCreateMovie = f
	return mmCreateMovie.mock
}

// When sets expectation for the movieCreator.CreateMovie which will trigger the result defined by the following
// Then helper
func (mmCreateMovie *mMovieCreatorMockCreateMovie) When(ctx context.Context, movie models.Movie) *MovieCreatorMockCreateMovieExpectation {
	if mmCreateMovie.mock.funcCreateMovie != nil {
		mmCreateMovie.mock.t.Fatalf("MovieCreatorMock.CreateMovie mock is already set by Set")
	}

	expectation := &MovieCreatorMockCreateMovieExpectation{
		mock:   mmCreateMovie.mock,
		params: &MovieCreatorMockCreateMovieParams{ctx, movie},
	}
	mmCreateMovie.expectations = append(mmCreateMovie.expectations, expectation)
	return expectation
}

// Then sets up movieCreator.CreateMovie return parameters for the expectation previously defined by the When method
func (e *MovieCreatorMockCreateMovieExpectation) Then(err error) *MovieCreatorMock {
	e.results = &MovieCreatorMockCreateMovieResults{err}
	return e.mock
}

// CreateMovie implements movie_post.movieCreator
func (mmCreateMovie *MovieCreatorMock) CreateMovie(ctx context.Context, movie models.Movie) (err error) {
	mm_atomic.AddUint64(&mmCreateMovie.beforeCreateMovieCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateMovie.afterCreateMovieCounter, 1)

	if mmCreateMovie.inspectFuncCreateMovie != nil {
		mmCreateMovie.inspectFuncCreateMovie(ctx, movie)
	}

	mm_params := &MovieCreatorMockCreateMovieParams{ctx, movie}

	// Record call args
	mmCreateMovie.CreateMovieMock.mutex.Lock()
	mmCreateMovie.CreateMovieMock.callArgs = append(mmCreateMovie.CreateMovieMock.callArgs, mm_params)
	mmCreateMovie.CreateMovieMock.mutex.Unlock()

	for _, e := range mmCreateMovie.CreateMovieMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateMovie.CreateMovieMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateMovie.CreateMovieMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateMovie.CreateMovieMock.defaultExpectation.params
		mm_got := MovieCreatorMockCreateMovieParams{ctx, movie}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateMovie.t.Errorf("MovieCreatorMock.CreateMovie got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateMovie.CreateMovieMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateMovie.t.Fatal("No results are set for the MovieCreatorMock.CreateMovie")
		}
		return (*mm_results).err
	}
	if mmCreateMovie.funcCreateMovie != nil {
		return mmCreateMovie.funcCreateMovie(ctx, movie)
	}
	mmCreateMovie.t.Fatalf("Unexpected call to MovieCreatorMock.CreateMovie. %v %v", ctx, movie)
	return
}

// CreateMovieAfterCounter returns a count of finished MovieCreatorMock.CreateMovie invocations
func (mmCreateMovie *MovieCreatorMock) CreateMovieAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateMovie.afterCreateMovieCounter)
}

// CreateMovieBeforeCounter returns a count of MovieCreatorMock.CreateMovie invocations
func (mmCreateMovie *MovieCreatorMock) CreateMovieBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateMovie.beforeCreateMovieCounter)
}

// Calls returns a list of arguments used in each call to MovieCreatorMock.CreateMovie.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateMovie *mMovieCreatorMockCreateMovie) Calls() []*MovieCreatorMockCreateMovieParams {
	mmCreateMovie.mutex.RLock()

	argCopy := make([]*MovieCreatorMockCreateMovieParams, len(mmCreateMovie.callArgs))
	copy(argCopy, mmCreateMovie.callArgs)

	mmCreateMovie.mutex.RUnlock()

	return argCopy
}

// MinimockCreateMovieDone returns true if the count of the CreateMovie invocations corresponds
// the number of defined expectations
func (m *MovieCreatorMock) MinimockCreateMovieDone() bool {
	for _, e := range m.CreateMovieMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMovieMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateMovieCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateMovie != nil && mm_atomic.LoadUint64(&m.afterCreateMovieCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateMovieInspect logs each unmet expectation
func (m *MovieCreatorMock) MinimockCreateMovieInspect() {
	for _, e := range m.CreateMovieMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MovieCreatorMock.CreateMovie with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMovieMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateMovieCounter) < 1 {
		if m.CreateMovieMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MovieCreatorMock.CreateMovie")
		} else {
			m.t.Errorf("Expected call to MovieCreatorMock.CreateMovie with params: %#v", *m.CreateMovieMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateMovie != nil && mm_atomic.LoadUint64(&m.afterCreateMovieCounter) < 1 {
		m.t.Error("Expected call to MovieCreatorMock.CreateMovie")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MovieCreatorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateMovieInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MovieCreatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MovieCreatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateMovieDone()
}
