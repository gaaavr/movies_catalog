package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// MovieDeleterMock implements movie_delete.movieDeleter
type MovieDeleterMock struct {
	t minimock.Tester

	funcDeleteMovie          func(ctx context.Context, id int64) (err error)
	inspectFuncDeleteMovie   func(ctx context.Context, id int64)
	afterDeleteMovieCounter  uint64
	beforeDeleteMovieCounter uint64
	DeleteMovieMock          mMovieDeleterMockDeleteMovie
}

// NewMovieDeleterMock returns a mock for movie_delete.movieDeleter
func NewMovieDeleterMock(t minimock.Tester) *MovieDeleterMock {
	m := &MovieDeleterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteMovieMock = mMovieDeleterMockDeleteMovie{mock: m}
	m.DeleteMovieMock.callArgs = []*MovieDeleterMockDeleteMovieParams{}

	return m
}

type mMovieDeleterMockDeleteMovie struct {
	mock               *MovieDeleterMock
	defaultExpectation *MovieDeleterMockDeleteMovieExpectation
	expectations       []*MovieDeleterMockDeleteMovieExpectation

	callArgs []*MovieDeleterMockDeleteMovieParams
	mutex    sync.RWMutex
}

// MovieDeleterMockDeleteMovieExpectation specifies expectation struct of the movieDeleter.DeleteMovie
type MovieDeleterMockDeleteMovieExpectation struct {
	mock    *MovieDeleterMock
	params  *MovieDeleterMockDeleteMovieParams
	results *MovieDeleterMockDeleteMovieResults
	Counter uint64
}

// MovieDeleterMockDeleteMovieParams contains parameters of the movieDeleter.DeleteMovie
type MovieDeleterMockDeleteMovieParams struct {
	ctx context.Context
	id  int64
}

// MovieDeleterMockDeleteMovieResults contains results of the movieDeleter.DeleteMovie
type MovieDeleterMockDeleteMovieResults struct {
	err error
}

// Expect sets up expected params for movieDeleter.DeleteMovie
func (mmDeleteMovie *mMovieDeleterMockDeleteMovie) Expect(ctx context.Context, id int64) *mMovieDeleterMockDeleteMovie {
	if mmDeleteMovie.mock.funcDeleteMovie != nil {
		mmDeleteMovie.mock.t.Fatalf("MovieDeleterMock.DeleteMovie mock is already set by Set")
	}

	if mmDeleteMovie.defaultExpectation == nil {
		mmDeleteMovie.defaultExpectation = &MovieDeleterMockDeleteMovieExpectation{}
	}

	mmDeleteMovie.defaultExpectation.params = &MovieDeleterMockDeleteMovieParams{ctx, id}
	for _, e := range mmDeleteMovie.expectations {
		if minimock.Equal(e.params, mmDeleteMovie.defaultExpectation.params) {
			mmDeleteMovie.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteMovie.defaultExpectation.params)
		}
	}

	return mmDeleteMovie
}

// Inspect accepts an inspector function that has same arguments as the movieDeleter.DeleteMovie
func (mmDeleteMovie *mMovieDeleterMockDeleteMovie) Inspect(f func(ctx context.Context, id int64)) *mMovieDeleterMockDeleteMovie {
	if mmDeleteMovie.mock.inspectFuncDeleteMovie != nil {
		mmDeleteMovie.mock.t.Fatalf("Inspect function is already set for MovieDeleterMock.DeleteMovie")
	}

	mmDeleteMovie.mock.inspectFuncDeleteMovie = f

	return mmDeleteMovie
}

// Return sets up results that will be returned by movieDeleter.DeleteMovie
func (mmDeleteMovie *mMovieDeleterMockDeleteMovie) Return(err error) *MovieDeleterMock {
	if mmDeleteMovie.mock.funcDeleteMovie != nil {
		mmDeleteMovie.mock.t.Fatalf("MovieDeleterMock.DeleteMovie mock is already set by Set")
	}

	if mmDeleteMovie.defaultExpectation == nil {
		mmDeleteMovie.defaultExpectation = &MovieDeleterMockDeleteMovieExpectation{mock: mmDeleteMovie.mock}
	}
	mmDeleteMovie.defaultExpectation.results = &MovieDeleterMockDeleteMovieResults{err}
	return mmDeleteMovie.mock
}

// Set uses given function f to mock the movieDeleter.DeleteMovie method
func (mmDeleteMovie *mMovieDeleterMockDeleteMovie) Set(f func(ctx context.Context, id int64) (err error)) *MovieDeleterMock {
	if mmDeleteMovie.defaultExpectation != nil {
		mmDeleteMovie.mock.t.Fatalf("Default expectation is already set for the movieDeleter.DeleteMovie method")
	}

	if len(mmDeleteMovie.expectations) > 0 {
		mmDeleteMovie.mock.t.Fatalf("Some expectations are already set for the movieDeleter.DeleteMovie method")
	}

	mmDeleteMovie.mock.funcDeleteMovie = f
	return mmDeleteMovie.mock
}

// When sets expectation for the movieDeleter.DeleteMovie which will trigger the result defined by the following
// Then helper
func (mmDeleteMovie *mMovieDeleterMockDeleteMovie) When(ctx context.Context, id int64) *MovieDeleterMockDeleteMovieExpectation {
	if mmDeleteMovie.mock.funcDeleteMovie != nil {
		mmDeleteMovie.mock.t.Fatalf("MovieDeleterMock.DeleteMovie mock is already set by Set")
	}

	expectation := &MovieDeleterMockDeleteMovieExpectation{
		mock:   mmDeleteMovie.mock,
		params: &MovieDeleterMockDeleteMovieParams{ctx, id},
	}
	mmDeleteMovie.expectations = append(mmDeleteMovie.expectations, expectation)
	return expectation
}

// Then sets up movieDeleter.DeleteMovie return parameters for the expectation previously defined by the When method
func (e *MovieDeleterMockDeleteMovieExpectation) Then(err error) *MovieDeleterMock {
	e.results = &MovieDeleterMockDeleteMovieResults{err}
	return e.mock
}

// DeleteMovie implements movie_delete.movieDeleter
func (mmDeleteMovie *MovieDeleterMock) DeleteMovie(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteMovie.beforeDeleteMovieCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteMovie.afterDeleteMovieCounter, 1)

	if mmDeleteMovie.inspectFuncDeleteMovie != nil {
		mmDeleteMovie.inspectFuncDeleteMovie(ctx, id)
	}

	mm_params := &MovieDeleterMockDeleteMovieParams{ctx, id}

	// Record call args
	mmDeleteMovie.DeleteMovieMock.mutex.Lock()
	mmDeleteMovie.DeleteMovieMock.callArgs = append(mmDeleteMovie.DeleteMovieMock.callArgs, mm_params)
	mmDeleteMovie.DeleteMovieMock.mutex.Unlock()

	for _, e := range mmDeleteMovie.DeleteMovieMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteMovie.DeleteMovieMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteMovie.DeleteMovieMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteMovie.DeleteMovieMock.defaultExpectation.params
		mm_got := MovieDeleterMockDeleteMovieParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteMovie.t.Errorf("MovieDeleterMock.DeleteMovie got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteMovie.DeleteMovieMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteMovie.t.Fatal("No results are set for the MovieDeleterMock.DeleteMovie")
		}
		return (*mm_results).err
	}
	if mmDeleteMovie.funcDeleteMovie != nil {
		return mmDeleteMovie.funcDeleteMovie(ctx, id)
	}
	mmDeleteMovie.t.Fatalf("Unexpected call to MovieDeleterMock.DeleteMovie. %v %v", ctx, id)
	return
}

// DeleteMovieAfterCounter returns a count of finished MovieDeleterMock.DeleteMovie invocations
func (mmDeleteMovie *MovieDeleterMock) DeleteMovieAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteMovie.afterDeleteMovieCounter)
}

// DeleteMovieBeforeCounter returns a count of MovieDeleterMock.DeleteMovie invocations
func (mmDeleteMovie *MovieDeleterMock) DeleteMovieBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteMovie.beforeDeleteMovieCounter)
}

// Calls returns a list of arguments used in each call to MovieDeleterMock.DeleteMovie.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteMovie *mMovieDeleterMockDeleteMovie) Calls() []*MovieDeleterMockDeleteMovieParams {
	mmDeleteMovie.mutex.RLock()

	argCopy := make([]*MovieDeleterMockDeleteMovieParams, len(mmDeleteMovie.callArgs))
	copy(argCopy, mmDeleteMovie.callArgs)

	mmDeleteMovie.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteMovieDone returns true if the count of the DeleteMovie invocations corresponds
// the number of defined expectations
func (m *MovieDeleterMock) MinimockDeleteMovieDone() bool {
	for _, e := range m.DeleteMovieMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMovieMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteMovieCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteMovie != nil && mm_atomic.LoadUint64(&m.afterDeleteMovieCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteMovieInspect logs each unmet expectation
func (m *MovieDeleterMock) MinimockDeleteMovieInspect() {
	for _, e := range m.DeleteMovieMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MovieDeleterMock.DeleteMovie with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMovieMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteMovieCounter) < 1 {
		if m.DeleteMovieMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MovieDeleterMock.DeleteMovie")
		} else {
			m.t.Errorf("Expected call to MovieDeleterMock.DeleteMovie with params: %#v", *m.DeleteMovieMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteMovie != nil && mm_atomic.LoadUint64(&m.afterDeleteMovieCounter) < 1 {
		m.t.Error("Expected call to MovieDeleterMock.DeleteMovie")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MovieDeleterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDeleteMovieInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MovieDeleterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MovieDeleterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteMovieDone()
}
